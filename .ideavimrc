" https://www.cyberwizard.io/posts/the-ultimate-ideavim-setup/

""" Map leader to space ---------------------
let mapleader=" "

""" Plugins  --------------------------------
set surround
set multiple-cursors
set commentary
set argtextobj
set easymotion
set textobj-entire
set ReplaceWithRegister
set sneak
set which-key
set highlightedyank """ briefly highlight yanked text
set fuzzier
set nerdtree

""" Plugin settings -------------------------
let g:argtextobj_pairs="[:],(:),<:>"

""" quickscope settings -------
""" let g:qs_highlight_on_keys = ['f', 'F', 't', 'T']

""" Common settings -------------------------
set showmode
set so=5
set incsearch
set nu

""" Search improvements
set ignorecase
set smartcase
set incsearch
set hlsearch

""" Idea specific settings ------------------
set ideajoin
set ideastatusicon=gray
set idearefactormode=keep

""" Mappings --------------------------------
" Which-key settings
set which-key
set notimeout
let g:WhichKey_ShowVimActions = "true"
let g:WhichKey_FontSize = 16
let g:WhichKey_CommandColor = "#41ead4"
let g:WhichKey_PrefixColor = "#f335b2"
let g:WhichKey_SortOrder = "by_key_prefix_first"

let g:WhichKeyDesc_leader = "<leader> Leader key"


"" Key mappings
"" ========================================================

" Tab navigation
nmap <A-n> :tabnext<CR>
nmap <A-p> :tabprev<CR>

" Pane navigation
nmap <A-h> <C-w>h
nmap <A-l> <C-w>l
nmap <A-k> <C-w>k
nmap <A-j> <C-w>j

" Easy visual indentation
vmap < <gv
vmap > >gv

" Execute macro saved in 'q' register
nmap qj @q

" Popup navigation.  This doesn't seem to work.  Instead remap directly in intellij.
imap <C-j> <Action>(PopupMenu-selectNext)
imap <C-k> <Action>(PopupMenu-selectPrev)

" Jump between methods
nmap [[ <Action>(MethodUp)
let g:WhichKeyDesc_go_to_prev_method = "[[ Jump to previous method"

nmap ]] <Action>(MethodDown)
let g:WhichKeyDesc_go_to_next_method = "]] Jump to next method"

" Keys from vim-gitgutter
nmap ]c <Action>(VcsShowNextChangeMarker)
let g:WhichKeyDesc_goto_next_change = "]c Jump to next change marker"
nmap [c <Action>(VcsShowPrevChangeMarker)
let g:WhichKeyDesc_goto_prev_change = "[c Jump to previous change marker"
" Not from vim-gitgutter. ={motion} is for indenting. =c does nothing
nmap =c <Action>(VcsShowCurrentChangeMarker)
let g:WhichKeyDesc_goto_current_change = "=c Show current change marker"

nmap ]e <Action>(GotoNextError)
let g:WhichKeyDesc_goto_next_error = "]e Jump to next error"
nmap [e <Action>(GotoPreviousError)
let g:WhichKeyDesc_goto_prev_error = "[e Jump to previous error"

" These don't work in Rider, annoyingly. Try HighlightUsagesInFile (see <leader>h below)
nmap ]q <Action>(GotoNextElementUnderCaretUsage)
let g:WhichKeyDesc_goto_next_usage = "]q Jump to next element under caret usage"
nmap [q <Action>(GotoPrevElementUnderCaretUsage)
let g:WhichKeyDesc_goto_prev_usage = "[q Jump to previous element under caret usage"

"" Leader commands
"" ========================================================

" Quick Java Doc
map <leader>? <Action>(QuickJavaDoc)
let g:WhichKeyDesc_quick_java_doc = "<leader>? Quick Java Doc"

map <leader>p <Action>(ParameterInfo)
let g:WhichKeyDesc_parameter_info = "<leader>p Parameter info"

" Open terminal
map <leader>t <Action>(ActivateTerminalToolWindow)
let g:WhichKeyDesc_terminal = "<leader>t Open terminal"

" Comment lines
map <leader>c <action>(CommentByLineComment)
let g:WhichKeyDesc_comment = "<leader>c Comment line"

" Jump around with easymotion
map <leader>j <Plug>(easymotion-s)
let g:WhichKeyDesc_easymotion = "<leader>j Jump with Easymotion"
" let g:WhichKeyDesc_easymotion_prefix = "<leader><leader>"

" Open NERDTree (use q to exit)
map <leader>x :NERDTree<CR>
let g:WhichKeyDesc_file_explorer = "<leader>x File Explorer"

" Folding
let g:WhichKeyDesc_fold = "<leader>z Folding"

map <leader>zc :action CollapseAllRegions<CR>
let g:WhichKeyDesc_fold_all = "<leader>zc Fold all regions"

map <leader>zo :action ExpandAllRegions<CR>
let g:WhichKeyDesc_unfold_all = "<leader>zo Unfold all regions"

" Window splits
let g:WhichKeyDesc_window = "<leader>w Window splits"

map <leader>wv <Action>(SplitVertically)
let g:WhichKeyDesc_window_split_vertically = "<leader>wv Split vertically"

map <leader>ws <Action>(SplitHorizontally)
let g:WhichKeyDesc_window_split_horizontally = "<leader>wh Split horizontally"

map <leader>wu <Action>(Unsplit)
let g:WhichKeyDesc_window_split_unsplit = "<leader>wu Unsplit"

map <leader>wm <Action>(MoveEditorToOppositeTabGroup)
let g:WhichKeyDesc_window_split_move_editor = "<leader>wm Move editor to opposite tab group"

" Display options
let g:WhichKeyDesc_display = "<leader>d Display options"

map <leader>dd <action>(ToggleDistractionFreeMode)
let g:WhichKeyDesc_df_mode = "<leader>dd Toggle Distraction-Free mode"
map <leader>dz <action>(ToggleZenMode)
let g:WhichKeyDesc_zen_mode = "<leader>dz Toggle Zen mode"
map <leader>df <action>(ToggleFullScreen)
let g:WhichKeyDesc_fullscreen = "<leader>df Toggle full screen"


" Actions
let g:WhichKeyDesc_action= "<leader>a Actions"

map <leader>am <action>(ShowIntentionActions)
let g:WhichKeyDesc_action_context_menu = "<leader>am Open context menu"

map <leader>as <action>(SearchEverywhere)
let g:WhichKeyDesc_action_search = "<leader>as Open command modal"

map <leader>aa <action>(GotoAction)
let g:WhichKeyDesc_action_go_to = "<leader>aa Go to action"

" File navigation
let g:WhichKeyDesc_file_nav = "<leader>f File navigation"

map <leader>ff <action>(GotoFile)
let g:WhichKeyDesc_file_nav_goto_file = "<leader>ff Go to file"

map <leader>fF <action>(com.mituuz.fuzzier.Fuzzier)
let g:WhichKeyDesc_file_fuzzy_goto = "<leader>fF Fuzzy go to file"

map <leader>ft <action>(TextSearchAction)
let g:WhichKeyDesc_file_nav_text_search = "<leader>ft Text search"

map <leader>fr <action>(RecentFiles)
let g:WhichKeyDesc_file_nav_show_recent_files = "<leader>fr Show recent files"

map <leader>fc <action>(FindInPath)
let g:WhichKeyDesc_file_nav_goto_content = "<leader>fc Search for file content"

map <leader>fl <action>(RecentLocations)
let g:WhichKeyDesc_file_nav_show_recent_locations = "<leader>fl Show recent locations"

map <leader>fs <action>(NewScratchFile)
let g:WhichKeyDesc_file_nav_new_scratch_file = "<leader>fs New scratch file"


" Close active tab
map <leader>q <action>(CloseActiveTab)
let g:WhichKeyDesc_close_tab = "<leader>q Close active tab"

" Refactoring
let g:WhichKeyDesc_refactoring = "<leader>r Refactoring menu"

map <leader>rn <Action>(RenameElement)
let g:WhichKeyDesc_refactoring_rename = "<leader>rn Rename element"

map <leader>rm <Action>(ExtractMethod)
let g:WhichKeyDesc_refactoring_method = "<leader>rm Extract method"

map <leader>rv <Action>(IntroduceVariable)
let g:WhichKeyDesc_refactoring_variable = "<leader>rv Introduce variable"

map <leader>rf <Action>(IntroduceField)
let g:WhichKeyDesc_refactoring_field = "<leader>rf Introduce field"

map <leader>rs <Action>(ChangeSignature)
let g:WhichKeyDesc_refactoring_signature = "<leader>rs Change signature"

map <leader>rq <Action>(Refactorings.QuickListPopupAction)
let g:WhichKeyDesc_refactoring_all = "<leader>rq Open refactorings list"

map <leader>rr <Action>(ShowReformatFileDialog)
let g:WhichKeyDesc_refactoring_reformat = "<leader>rr Reformat file"

" Go to code
let g:WhichKeyDesc_goto = "<leader>g Go to X"

nmap <leader>gd <Action>(GotoDeclaration)
let g:WhichKeyDesc_goto_declaration = "<leader>gd Go to Definition"

nmap <leader>gy <Action>(GotoTypeDeclaration)
let g:WhichKeyDesc_goto_type_declaration = "<leader>gy Go to Type Definition"

nmap <leader>gi <Action>(GotoImplementation)
let g:WhichKeyDesc_goto_implementation = "<leader>gi Go to Implementation"

nmap <leader>gu <Action>(ShowUsages)
let g:WhichKeyDesc_goto_usages = "<leader>gu Go to Usages"

nmap <leader>gt <Action>(GotoTest)
let g:WhichKeyDesc_goto_test = "<leader>gt Go to Test"

nmap <leader>gb <Action>(Back)
let g:WhichKeyDesc_goto_back = "<leader>gb Go Back"

nmap <leader>gf <Action>(Forward)
let g:WhichKeyDesc_goto_forward = "<leader>gf Go Forward"

map <leader>gs <Action>(com.devspaces.netflix.plugingotointellij.GoToActionSpinnaker)
let g:WhichKeyDesc_links_goto_action_spinnaker = "<leader>gs Go to spinnaker"

map <leader>gg <Action>(com.devspaces.netflix.plugingotointellij.GoToActionRepo)
let g:WhichKeyDesc_links_goto_action_repo = "<leader>gg Go to github branch"

" Git windows
let g:WhichKeyDesc_git = "<leader>v Git operations"

map <leader>vc <Action>(CheckinProject)
let g:WhichKeyDesc_git_commit = "<leader>vc Open Git commit dialog"

map <leader>vs <Action>(ActivateVersionControlToolWindow)
let g:WhichKeyDesc_git_status = "<leader>vs Open Git status dialog"

map <leader>vb <Action>(Git.Branches)
let g:WhichKeyDesc_git_branches = "<leader>vb Open Git branches list"

" Hierarchy
let g:WhichKeyDesc_hierarchy = "<leader>H Hierarchy"

map <leader>Hc <Action>(CallHierarchy)
let g:WhichKeyDesc_hierarchy_call = "<leader>Hc Call"

map <leader>HC <Action>(ClassHierarchy)
let g:WhichKeyDesc_hierarchy_class = "<leader>HC Class"

map <leader>Hm <Action>(MethodHierarchy)
let g:WhichKeyDesc_hierarchy_method = "<leader>Hm Method"


" Errors
let g:WhichKeyDesc_errors = "<leader>e Error navigation"

map <leader>en <Action>(GotoNextError)
let g:WhichKeyDesc_errors_next = "<leader>en Go to next error in solution"

map <leader>ep <Action>(GotoPreviousError)
let g:WhichKeyDesc_errors_prev = "<leader>ep Go to previous error in solution"

" Links
let g:WhichKeyDesc_links = "<leader>l Links"
let g:WhichKeyDesc_links_copy = "<leader>l Copy link"
let g:WhichKeyDesc_links_git = "<leader>lg Github"
let g:WhichKeyDesc_links_sourcegraph = "<leader>ls Sourcegraph"

map <leader>lgb <Action>(com.devspaces.netflix.plugingotointellij.GoToActionRepoCopy)
let g:WhichKeyDesc_links_git_action_repo_copy = "<leader>lgb Branch"

map <leader>lgc <Action>(com.devspaces.netflix.plugingotointellij.GoToActionRepoCopyExact)
let g:WhichKeyDesc_links_git_action_repo_copy_exact = "<leader>lgc Commit"

map <leader>lgp <Action>(com.devspaces.netflix.plugingotointellij.GoToActionCodePRs)
let g:WhichKeyDesc_links_git_action_commit_prs = "<leader>lgp PR"

map <leader>lsb <Action>(com.devspaces.netflix.plugingotointellij.GoToActionSourcegraphCopy)
let g:WhichKeyDesc_links_sourcegraph_action_sourcegraph_copy = "<leader>lsb Branch"

map <leader>lsc <Action>(com.devspaces.netflix.plugingotointellij.GoToActionSourcegraphCopyExact)
let g:WhichKeyDesc_links_sourcegraph_action_sourcegraph_copy_exact = "<leader>lsc Commit"


" Bookmarks
let g:WhichKeyDesc_bookmarks = "<leader>b Bookmarks"

map <leader>b <Action>(ShowBookmarks)
let g:WhichKeyDesc_bookmarks_show = "<leader>b Show bookmarks"

map <leader>bc <action>(ToggleBookmark)
let g:WhichKeyDesc_bookmarks_create = "<leader>bc Create bookmark"
map <leader>bn <action>(ToggleBookmarkWithMnemonic)
let g:WhichKeyDesc_bookmarks_toggle_mnemonic = "<leader>bn Toggle Mnemonic Bookmark"

" New
let g:WhichKeyDesc_new = "<leader>n New"
map <leader>nf <Action>(NewFile)
let g:WhichKeyDesc_new_file = "<leader>nf New file"

" Harpoon
map <leader>h <action>(ShowHarpoon)
let g:WhichKeyDesc_harpoon = "<leader>h Harpoon"
map <leader>hQ <action>(SetHarpoon1)
let g:WhichKeyDesc_harpoon_set1 = "<leader>hQ Set Harpoon 1"
map <leader>hW <action>(SetHarpoon2)
let g:WhichKeyDesc_harpoon_set2 = "<leader>hW Set Harpoon 2"
map <leader>hE <action>(SetHarpoon3)
let g:WhichKeyDesc_harpoon_set3 = "<leader>hE Set Harpoon 3"
map <leader>hR <action>(SetHarpoon4)
let g:WhichKeyDesc_harpoon_set4 = "<leader>hR Set Harpoon 4"
map <leader>hT <action>(SetHarpoon5)
let g:WhichKeyDesc_harpoon_set5 = "<leader>hT Set Harpoon 5"
map <leader>hq <action>(GotoHarpoon1)
let g:WhichKeyDesc_harpoon_goto1 = "<leader>hq Goto Harpoon 1"
map <leader>hw <action>(GotoHarpoon2)
let g:WhichKeyDesc_harpoon_goto2 = "<leader>hw Goto Harpoon 2"
map <leader>he <action>(GotoHarpoon3)
let g:WhichKeyDesc_harpoon_goto3 = "<leader>he Goto Harpoon 3"
map <leader>hr <action>(GotoHarpoon4)
let g:WhichKeyDesc_harpoon_goto4 = "<leader>hr Goto Harpoon 4"
map <leader>ht <action>(GotoHarpoon5)
let g:WhichKeyDesc_harpoon_goto5 = "<leader>ht Goto Harpoon 5"

" Inspect

map <leader>i <action>(InspectCode)
let g:WhichKeyDesc_inspect_code = "<leader>i Inspect code"
" Map escape to :noh <CR> to clear search highlighting
map <esc> :noh <CR>
